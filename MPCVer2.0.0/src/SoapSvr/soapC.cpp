/* soapC.cpp
   Generated by gSOAP 2.8.14 from MPCSoapI.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2013-08-21 08:23:30 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_MPC__typeRequest:
		return soap_in_MPC__typeRequest(soap, NULL, NULL, "MPC:typeRequest");
	case SOAP_TYPE_MPC__flashReguest:
		return soap_in_MPC__flashReguest(soap, NULL, NULL, "MPC:flashReguest");
	case SOAP_TYPE_MPC__flashReguestResponse:
		return soap_in_MPC__flashReguestResponse(soap, NULL, NULL, "MPC:flashReguestResponse");
	case SOAP_TYPE_MPC__npRequest:
		return soap_in_MPC__npRequest(soap, NULL, NULL, "MPC:npRequest");
	case SOAP_TYPE_MPC__npRequestResponse:
		return soap_in_MPC__npRequestResponse(soap, NULL, NULL, "MPC:npRequestResponse");
	case SOAP_TYPE_MPC__npRequestRequest:
		return soap_in_MPC__npRequestRequest(soap, NULL, NULL, "MPC:npRequestRequest");
	case SOAP_TYPE_PMPC__npRequestResponse:
		return soap_in_PMPC__npRequestResponse(soap, NULL, NULL, "PMPC:npRequestResponse");
	case SOAP_TYPE_PointerTo_MPC__npRequestResponse:
		return soap_in_PointerTo_MPC__npRequestResponse(soap, NULL, NULL, "MPC:npRequestResponse");
	case SOAP_TYPE_PMPC__npRequestRequest:
		return soap_in_PMPC__npRequestRequest(soap, NULL, NULL, "PMPC:npRequestRequest");
	case SOAP_TYPE_PointerTo_MPC__npRequestRequest:
		return soap_in_PointerTo_MPC__npRequestRequest(soap, NULL, NULL, "MPC:npRequestRequest");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:typeRequest"))
		{	*type = SOAP_TYPE_MPC__typeRequest;
			return soap_in_MPC__typeRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:flashReguest"))
		{	*type = SOAP_TYPE_MPC__flashReguest;
			return soap_in_MPC__flashReguest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:flashReguestResponse"))
		{	*type = SOAP_TYPE_MPC__flashReguestResponse;
			return soap_in_MPC__flashReguestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:npRequest"))
		{	*type = SOAP_TYPE_MPC__npRequest;
			return soap_in_MPC__npRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:npRequestResponse"))
		{	*type = SOAP_TYPE_MPC__npRequestResponse;
			return soap_in_MPC__npRequestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:npRequestRequest"))
		{	*type = SOAP_TYPE_MPC__npRequestRequest;
			return soap_in_MPC__npRequestRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "MPC:npRequestResponse"))
		{	*type = SOAP_TYPE__MPC__npRequestResponse;
			return soap_in__MPC__npRequestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MPC:npRequestRequest"))
		{	*type = SOAP_TYPE__MPC__npRequestRequest;
			return soap_in__MPC__npRequestRequest(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__string:
		return soap_out_xsd__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_MPC__typeRequest:
		return soap_out_MPC__typeRequest(soap, tag, id, (const struct MPC__typeRequest *)ptr, "MPC:typeRequest");
	case SOAP_TYPE_MPC__flashReguest:
		return soap_out_MPC__flashReguest(soap, tag, id, (const struct MPC__flashReguest *)ptr, "MPC:flashReguest");
	case SOAP_TYPE_MPC__flashReguestResponse:
		return soap_out_MPC__flashReguestResponse(soap, tag, id, (const struct MPC__flashReguestResponse *)ptr, "MPC:flashReguestResponse");
	case SOAP_TYPE_MPC__npRequest:
		return soap_out_MPC__npRequest(soap, tag, id, (const struct MPC__npRequest *)ptr, "MPC:npRequest");
	case SOAP_TYPE_MPC__npRequestResponse:
		return soap_out_MPC__npRequestResponse(soap, tag, id, (const struct _MPC__npRequestResponse *)ptr, "MPC:npRequestResponse");
	case SOAP_TYPE__MPC__npRequestResponse:
		return soap_out__MPC__npRequestResponse(soap, "MPC:npRequestResponse", id, (const struct _MPC__npRequestResponse *)ptr, NULL);
	case SOAP_TYPE_MPC__npRequestRequest:
		return soap_out_MPC__npRequestRequest(soap, tag, id, (const struct _MPC__npRequestRequest *)ptr, "MPC:npRequestRequest");
	case SOAP_TYPE__MPC__npRequestRequest:
		return soap_out__MPC__npRequestRequest(soap, "MPC:npRequestRequest", id, (const struct _MPC__npRequestRequest *)ptr, NULL);
	case SOAP_TYPE_PMPC__npRequestResponse:
		return soap_out_PMPC__npRequestResponse(soap, tag, id, (struct _MPC__npRequestResponse *const*)ptr, "PMPC:npRequestResponse");
	case SOAP_TYPE_PointerTo_MPC__npRequestResponse:
		return soap_out_PointerTo_MPC__npRequestResponse(soap, tag, id, (struct _MPC__npRequestResponse *const*)ptr, "MPC:npRequestResponse");
	case SOAP_TYPE_PMPC__npRequestRequest:
		return soap_out_PMPC__npRequestRequest(soap, tag, id, (struct _MPC__npRequestRequest *const*)ptr, "PMPC:npRequestRequest");
	case SOAP_TYPE_PointerTo_MPC__npRequestRequest:
		return soap_out_PointerTo_MPC__npRequestRequest(soap, tag, id, (struct _MPC__npRequestRequest *const*)ptr, "MPC:npRequestRequest");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_xsd__string:
		soap_serialize_xsd__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_MPC__typeRequest:
		soap_serialize_MPC__typeRequest(soap, (const struct MPC__typeRequest *)ptr);
		break;
	case SOAP_TYPE_MPC__flashReguest:
		soap_serialize_MPC__flashReguest(soap, (const struct MPC__flashReguest *)ptr);
		break;
	case SOAP_TYPE_MPC__flashReguestResponse:
		soap_serialize_MPC__flashReguestResponse(soap, (const struct MPC__flashReguestResponse *)ptr);
		break;
	case SOAP_TYPE_MPC__npRequest:
		soap_serialize_MPC__npRequest(soap, (const struct MPC__npRequest *)ptr);
		break;
	case SOAP_TYPE_MPC__npRequestResponse:
		soap_serialize_MPC__npRequestResponse(soap, (const struct _MPC__npRequestResponse *)ptr);
		break;
	case SOAP_TYPE__MPC__npRequestResponse:
		soap_serialize__MPC__npRequestResponse(soap, (const struct _MPC__npRequestResponse *)ptr);
		break;
	case SOAP_TYPE_MPC__npRequestRequest:
		soap_serialize_MPC__npRequestRequest(soap, (const struct _MPC__npRequestRequest *)ptr);
		break;
	case SOAP_TYPE__MPC__npRequestRequest:
		soap_serialize__MPC__npRequestRequest(soap, (const struct _MPC__npRequestRequest *)ptr);
		break;
	case SOAP_TYPE_PMPC__npRequestResponse:
		soap_serialize_PMPC__npRequestResponse(soap, (struct _MPC__npRequestResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_MPC__npRequestResponse:
		soap_serialize_PointerTo_MPC__npRequestResponse(soap, (struct _MPC__npRequestResponse *const*)ptr);
		break;
	case SOAP_TYPE_PMPC__npRequestRequest:
		soap_serialize_PMPC__npRequestRequest(soap, (struct _MPC__npRequestRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_MPC__npRequestRequest:
		soap_serialize_PointerTo_MPC__npRequestRequest(soap, (struct _MPC__npRequestRequest *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__MPC__npRequestRequest:
		return (void*)soap_instantiate__MPC__npRequestRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE__MPC__npRequestResponse:
		return (void*)soap_instantiate__MPC__npRequestResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__npRequest:
		return (void*)soap_instantiate_MPC__npRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__flashReguestResponse:
		return (void*)soap_instantiate_MPC__flashReguestResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__flashReguest:
		return (void*)soap_instantiate_MPC__flashReguest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__typeRequest:
		return (void*)soap_instantiate_MPC__typeRequest(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__npRequestRequest:
		return (void*)soap_instantiate_MPC__npRequestRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MPC__npRequestResponse:
		return (void*)soap_instantiate_MPC__npRequestResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__MPC__npRequestRequest:
		if (p->size < 0)
			SOAP_DELETE((struct _MPC__npRequestRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct _MPC__npRequestRequest*)p->ptr);
		break;
	case SOAP_TYPE__MPC__npRequestResponse:
		if (p->size < 0)
			SOAP_DELETE((struct _MPC__npRequestResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct _MPC__npRequestResponse*)p->ptr);
		break;
	case SOAP_TYPE_MPC__npRequest:
		if (p->size < 0)
			SOAP_DELETE((struct MPC__npRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct MPC__npRequest*)p->ptr);
		break;
	case SOAP_TYPE_MPC__flashReguestResponse:
		if (p->size < 0)
			SOAP_DELETE((struct MPC__flashReguestResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct MPC__flashReguestResponse*)p->ptr);
		break;
	case SOAP_TYPE_MPC__flashReguest:
		if (p->size < 0)
			SOAP_DELETE((struct MPC__flashReguest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct MPC__flashReguest*)p->ptr);
		break;
	case SOAP_TYPE_MPC__typeRequest:
		if (p->size < 0)
			SOAP_DELETE((struct MPC__typeRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct MPC__typeRequest*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_MPC__npRequestRequest:
		if (p->size < 0)
			SOAP_DELETE((struct _MPC__npRequestRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct _MPC__npRequestRequest*)p->ptr);
		break;
	case SOAP_TYPE_MPC__npRequestResponse:
		if (p->size < 0)
			SOAP_DELETE((struct _MPC__npRequestResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct _MPC__npRequestResponse*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__string, 0, sizeof(std::string), 0, soap_copy_xsd__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag?tag:"xsd:string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_MPC__typeRequest(struct soap *soap, struct MPC__typeRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_long(soap, &a->type);
	soap_default_long(soap, &a->order);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__typeRequest(struct soap *soap, const struct MPC__typeRequest *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__typeRequest(struct soap *soap, const char *tag, int id, const struct MPC__typeRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__typeRequest), type))
		return soap->error;
	if (soap_out_long(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_long(soap, "order", -1, &a->order, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct MPC__typeRequest * SOAP_FMAC4 soap_in_MPC__typeRequest(struct soap *soap, const char *tag, struct MPC__typeRequest *a, const char *type)
{
	size_t soap_flag_type = 1;
	size_t soap_flag_order = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct MPC__typeRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__typeRequest, sizeof(struct MPC__typeRequest), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_MPC__typeRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "type", &a->type, "xsd:long"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_order && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "order", &a->order, "xsd:long"))
				{	soap_flag_order--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct MPC__typeRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__typeRequest, 0, sizeof(struct MPC__typeRequest), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type > 0 || soap_flag_order > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__typeRequest(struct soap *soap, const struct MPC__typeRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__typeRequest);
	if (soap_out_MPC__typeRequest(soap, tag?tag:"MPC:typeRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct MPC__typeRequest * SOAP_FMAC4 soap_get_MPC__typeRequest(struct soap *soap, struct MPC__typeRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__typeRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct MPC__typeRequest * SOAP_FMAC2 soap_instantiate_MPC__typeRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MPC__typeRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_MPC__typeRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct MPC__typeRequest);
		if (size)
			*size = sizeof(struct MPC__typeRequest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct MPC__typeRequest, n);
		if (size)
			*size = n * sizeof(struct MPC__typeRequest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct MPC__typeRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_MPC__typeRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct MPC__typeRequest %p -> %p\n", q, p));
	*(struct MPC__typeRequest*)p = *(struct MPC__typeRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_MPC__flashReguest(struct soap *soap, struct MPC__flashReguest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_long(soap, &a->start_input);
	a->pReq = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__flashReguest(struct soap *soap, const struct MPC__flashReguest *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PMPC__npRequestResponse(soap, &a->pReq);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__flashReguest(struct soap *soap, const char *tag, int id, const struct MPC__flashReguest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__flashReguest), type))
		return soap->error;
	if (soap_out_long(soap, "start-input", -1, &a->start_input, ""))
		return soap->error;
	if (soap_out_PMPC__npRequestResponse(soap, "pReq", -1, &a->pReq, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct MPC__flashReguest * SOAP_FMAC4 soap_in_MPC__flashReguest(struct soap *soap, const char *tag, struct MPC__flashReguest *a, const char *type)
{
	size_t soap_flag_start_input = 1;
	size_t soap_flag_pReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct MPC__flashReguest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__flashReguest, sizeof(struct MPC__flashReguest), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_MPC__flashReguest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_start_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "start-input", &a->start_input, "xsd:long"))
				{	soap_flag_start_input--;
					continue;
				}
			if (soap_flag_pReq && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PMPC__npRequestResponse(soap, "pReq", &a->pReq, "PMPC:npRequestResponse"))
				{	soap_flag_pReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct MPC__flashReguest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__flashReguest, 0, sizeof(struct MPC__flashReguest), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_start_input > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__flashReguest(struct soap *soap, const struct MPC__flashReguest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__flashReguest);
	if (soap_out_MPC__flashReguest(soap, tag?tag:"MPC:flashReguest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct MPC__flashReguest * SOAP_FMAC4 soap_get_MPC__flashReguest(struct soap *soap, struct MPC__flashReguest *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__flashReguest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct MPC__flashReguest * SOAP_FMAC2 soap_instantiate_MPC__flashReguest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MPC__flashReguest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_MPC__flashReguest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct MPC__flashReguest);
		if (size)
			*size = sizeof(struct MPC__flashReguest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct MPC__flashReguest, n);
		if (size)
			*size = n * sizeof(struct MPC__flashReguest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct MPC__flashReguest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_MPC__flashReguest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct MPC__flashReguest %p -> %p\n", q, p));
	*(struct MPC__flashReguest*)p = *(struct MPC__flashReguest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_MPC__flashReguestResponse(struct soap *soap, struct MPC__flashReguestResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_long(soap, &a->count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__flashReguestResponse(struct soap *soap, const struct MPC__flashReguestResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__flashReguestResponse(struct soap *soap, const char *tag, int id, const struct MPC__flashReguestResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__flashReguestResponse), type))
		return soap->error;
	if (soap_out_long(soap, "count", -1, &a->count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct MPC__flashReguestResponse * SOAP_FMAC4 soap_in_MPC__flashReguestResponse(struct soap *soap, const char *tag, struct MPC__flashReguestResponse *a, const char *type)
{
	size_t soap_flag_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct MPC__flashReguestResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__flashReguestResponse, sizeof(struct MPC__flashReguestResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_MPC__flashReguestResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "count", &a->count, "xsd:long"))
				{	soap_flag_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct MPC__flashReguestResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__flashReguestResponse, 0, sizeof(struct MPC__flashReguestResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__flashReguestResponse(struct soap *soap, const struct MPC__flashReguestResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__flashReguestResponse);
	if (soap_out_MPC__flashReguestResponse(soap, tag?tag:"MPC:flashReguestResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct MPC__flashReguestResponse * SOAP_FMAC4 soap_get_MPC__flashReguestResponse(struct soap *soap, struct MPC__flashReguestResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__flashReguestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct MPC__flashReguestResponse * SOAP_FMAC2 soap_instantiate_MPC__flashReguestResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MPC__flashReguestResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_MPC__flashReguestResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct MPC__flashReguestResponse);
		if (size)
			*size = sizeof(struct MPC__flashReguestResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct MPC__flashReguestResponse, n);
		if (size)
			*size = n * sizeof(struct MPC__flashReguestResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct MPC__flashReguestResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_MPC__flashReguestResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct MPC__flashReguestResponse %p -> %p\n", q, p));
	*(struct MPC__flashReguestResponse*)p = *(struct MPC__flashReguestResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_MPC__npRequest(struct soap *soap, struct MPC__npRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_MPC__npRequestRequest(soap, &a->r_input);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__npRequest(struct soap *soap, const struct MPC__npRequest *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_MPC__npRequestRequest(soap, &a->r_input);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__npRequest(struct soap *soap, const char *tag, int id, const struct MPC__npRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__npRequest), type))
		return soap->error;
	if (soap_out_MPC__npRequestRequest(soap, "r-input", -1, &a->r_input, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct MPC__npRequest * SOAP_FMAC4 soap_in_MPC__npRequest(struct soap *soap, const char *tag, struct MPC__npRequest *a, const char *type)
{
	size_t soap_flag_r_input = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct MPC__npRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__npRequest, sizeof(struct MPC__npRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_MPC__npRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_r_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_MPC__npRequestRequest(soap, "r-input", &a->r_input, "MPC:npRequestRequest"))
				{	soap_flag_r_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct MPC__npRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__npRequest, 0, sizeof(struct MPC__npRequest), 0, soap_copy_MPC__npRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_r_input > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__npRequest(struct soap *soap, const struct MPC__npRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__npRequest);
	if (soap_out_MPC__npRequest(soap, tag?tag:"MPC:npRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct MPC__npRequest * SOAP_FMAC4 soap_get_MPC__npRequest(struct soap *soap, struct MPC__npRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__npRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct MPC__npRequest * SOAP_FMAC2 soap_instantiate_MPC__npRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MPC__npRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_MPC__npRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct MPC__npRequest);
		if (size)
			*size = sizeof(struct MPC__npRequest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct MPC__npRequest, n);
		if (size)
			*size = n * sizeof(struct MPC__npRequest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct MPC__npRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_MPC__npRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct MPC__npRequest %p -> %p\n", q, p));
	*(struct MPC__npRequest*)p = *(struct MPC__npRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__npRequestResponse(struct soap *soap, const struct _MPC__npRequestResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->AppID);
	soap_serialize_xsd__string(soap, &a->AppName);
	soap_serialize_xsd__string(soap, &a->DisplayName);
	soap_serialize_xsd__string(soap, &a->Detailtext);
	soap_serialize_xsd__string(soap, &a->Mark);
	soap_serialize_xsd__string(soap, &a->Type);
	soap_serialize_xsd__string(soap, &a->ServerVersion);
	soap_serialize_xsd__string(soap, &a->ResetServerVersion);
	soap_serialize_xsd__string(soap, &a->Size);
	soap_serialize_xsd__string(soap, &a->OrderNumber);
	soap_serialize_xsd__string(soap, &a->AllDownload);
	soap_serialize_xsd__string(soap, &a->FewDownload);
	soap_serialize_xsd__string(soap, &a->DownloadURL);
	soap_serialize_xsd__string(soap, &a->OS);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__npRequestResponse(struct soap *soap, const char *tag, int id, const struct _MPC__npRequestResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__npRequestResponse), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppID", -1, &a->AppID, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppName", -1, &a->AppName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DisplayName", -1, &a->DisplayName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Detailtext", -1, &a->Detailtext, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Mark", -1, &a->Mark, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Type", -1, &a->Type, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ServerVersion", -1, &a->ServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ResetServerVersion", -1, &a->ResetServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Size", -1, &a->Size, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "OrderNumber", -1, &a->OrderNumber, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "AllDownload", -1, &a->AllDownload, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "FewDownload", -1, &a->FewDownload, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DownloadURL", -1, &a->DownloadURL, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "OS", -1, &a->OS, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _MPC__npRequestResponse * SOAP_FMAC4 soap_in_MPC__npRequestResponse(struct soap *soap, const char *tag, struct _MPC__npRequestResponse *a, const char *type)
{
	size_t soap_flag_AppID = 1;
	size_t soap_flag_AppName = 1;
	size_t soap_flag_DisplayName = 1;
	size_t soap_flag_Detailtext = 1;
	size_t soap_flag_Mark = 1;
	size_t soap_flag_Type = 1;
	size_t soap_flag_ServerVersion = 1;
	size_t soap_flag_ResetServerVersion = 1;
	size_t soap_flag_Size = 1;
	size_t soap_flag_OrderNumber = 1;
	size_t soap_flag_AllDownload = 1;
	size_t soap_flag_FewDownload = 1;
	size_t soap_flag_DownloadURL = 1;
	size_t soap_flag_OS = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _MPC__npRequestResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__npRequestResponse, sizeof(struct _MPC__npRequestResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_MPC__npRequestResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AppID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppID", &a->AppID, "xsd:string"))
				{	soap_flag_AppID--;
					continue;
				}
			if (soap_flag_AppName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppName", &a->AppName, "xsd:string"))
				{	soap_flag_AppName--;
					continue;
				}
			if (soap_flag_DisplayName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DisplayName", &a->DisplayName, "xsd:string"))
				{	soap_flag_DisplayName--;
					continue;
				}
			if (soap_flag_Detailtext && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Detailtext", &a->Detailtext, "xsd:string"))
				{	soap_flag_Detailtext--;
					continue;
				}
			if (soap_flag_Mark && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Mark", &a->Mark, "xsd:string"))
				{	soap_flag_Mark--;
					continue;
				}
			if (soap_flag_Type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Type", &a->Type, "xsd:string"))
				{	soap_flag_Type--;
					continue;
				}
			if (soap_flag_ServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ServerVersion", &a->ServerVersion, "xsd:string"))
				{	soap_flag_ServerVersion--;
					continue;
				}
			if (soap_flag_ResetServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ResetServerVersion", &a->ResetServerVersion, "xsd:string"))
				{	soap_flag_ResetServerVersion--;
					continue;
				}
			if (soap_flag_Size && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Size", &a->Size, "xsd:string"))
				{	soap_flag_Size--;
					continue;
				}
			if (soap_flag_OrderNumber && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "OrderNumber", &a->OrderNumber, "xsd:string"))
				{	soap_flag_OrderNumber--;
					continue;
				}
			if (soap_flag_AllDownload && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AllDownload", &a->AllDownload, "xsd:string"))
				{	soap_flag_AllDownload--;
					continue;
				}
			if (soap_flag_FewDownload && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "FewDownload", &a->FewDownload, "xsd:string"))
				{	soap_flag_FewDownload--;
					continue;
				}
			if (soap_flag_DownloadURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DownloadURL", &a->DownloadURL, "xsd:string"))
				{	soap_flag_DownloadURL--;
					continue;
				}
			if (soap_flag_OS && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "OS", &a->OS, "xsd:string"))
				{	soap_flag_OS--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__npRequestResponse, 0, sizeof(struct _MPC__npRequestResponse), 0, soap_copy_MPC__npRequestResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AppID > 0 || soap_flag_AppName > 0 || soap_flag_DisplayName > 0 || soap_flag_Detailtext > 0 || soap_flag_Mark > 0 || soap_flag_Type > 0 || soap_flag_ServerVersion > 0 || soap_flag_ResetServerVersion > 0 || soap_flag_Size > 0 || soap_flag_OrderNumber > 0 || soap_flag_AllDownload > 0 || soap_flag_FewDownload > 0 || soap_flag_DownloadURL > 0 || soap_flag_OS > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__npRequestResponse(struct soap *soap, const struct _MPC__npRequestResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__npRequestResponse);
	if (soap_out_MPC__npRequestResponse(soap, tag?tag:"MPC:npRequestResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestResponse * SOAP_FMAC4 soap_get_MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__npRequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->AppID);
	soap_default_xsd__string(soap, &a->AppName);
	soap_default_xsd__string(soap, &a->DisplayName);
	soap_default_xsd__string(soap, &a->Detailtext);
	soap_default_xsd__string(soap, &a->Mark);
	soap_default_xsd__string(soap, &a->Type);
	soap_default_xsd__string(soap, &a->ServerVersion);
	soap_default_xsd__string(soap, &a->ResetServerVersion);
	soap_default_xsd__string(soap, &a->Size);
	soap_default_xsd__string(soap, &a->OrderNumber);
	soap_default_xsd__string(soap, &a->AllDownload);
	soap_default_xsd__string(soap, &a->FewDownload);
	soap_default_xsd__string(soap, &a->DownloadURL);
	soap_default_xsd__string(soap, &a->OS);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__MPC__npRequestResponse(struct soap *soap, const struct _MPC__npRequestResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->AppID);
	soap_serialize_xsd__string(soap, &a->AppName);
	soap_serialize_xsd__string(soap, &a->DisplayName);
	soap_serialize_xsd__string(soap, &a->Detailtext);
	soap_serialize_xsd__string(soap, &a->Mark);
	soap_serialize_xsd__string(soap, &a->Type);
	soap_serialize_xsd__string(soap, &a->ServerVersion);
	soap_serialize_xsd__string(soap, &a->ResetServerVersion);
	soap_serialize_xsd__string(soap, &a->Size);
	soap_serialize_xsd__string(soap, &a->OrderNumber);
	soap_serialize_xsd__string(soap, &a->AllDownload);
	soap_serialize_xsd__string(soap, &a->FewDownload);
	soap_serialize_xsd__string(soap, &a->DownloadURL);
	soap_serialize_xsd__string(soap, &a->OS);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MPC__npRequestResponse(struct soap *soap, const char *tag, int id, const struct _MPC__npRequestResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__MPC__npRequestResponse), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppID", -1, &a->AppID, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppName", -1, &a->AppName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DisplayName", -1, &a->DisplayName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Detailtext", -1, &a->Detailtext, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Mark", -1, &a->Mark, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Type", -1, &a->Type, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ServerVersion", -1, &a->ServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ResetServerVersion", -1, &a->ResetServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Size", -1, &a->Size, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "OrderNumber", -1, &a->OrderNumber, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "AllDownload", -1, &a->AllDownload, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "FewDownload", -1, &a->FewDownload, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DownloadURL", -1, &a->DownloadURL, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "OS", -1, &a->OS, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _MPC__npRequestResponse * SOAP_FMAC4 soap_in__MPC__npRequestResponse(struct soap *soap, const char *tag, struct _MPC__npRequestResponse *a, const char *type)
{
	size_t soap_flag_AppID = 1;
	size_t soap_flag_AppName = 1;
	size_t soap_flag_DisplayName = 1;
	size_t soap_flag_Detailtext = 1;
	size_t soap_flag_Mark = 1;
	size_t soap_flag_Type = 1;
	size_t soap_flag_ServerVersion = 1;
	size_t soap_flag_ResetServerVersion = 1;
	size_t soap_flag_Size = 1;
	size_t soap_flag_OrderNumber = 1;
	size_t soap_flag_AllDownload = 1;
	size_t soap_flag_FewDownload = 1;
	size_t soap_flag_DownloadURL = 1;
	size_t soap_flag_OS = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _MPC__npRequestResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__MPC__npRequestResponse, sizeof(struct _MPC__npRequestResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default__MPC__npRequestResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AppID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppID", &a->AppID, "xsd:string"))
				{	soap_flag_AppID--;
					continue;
				}
			if (soap_flag_AppName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppName", &a->AppName, "xsd:string"))
				{	soap_flag_AppName--;
					continue;
				}
			if (soap_flag_DisplayName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DisplayName", &a->DisplayName, "xsd:string"))
				{	soap_flag_DisplayName--;
					continue;
				}
			if (soap_flag_Detailtext && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Detailtext", &a->Detailtext, "xsd:string"))
				{	soap_flag_Detailtext--;
					continue;
				}
			if (soap_flag_Mark && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Mark", &a->Mark, "xsd:string"))
				{	soap_flag_Mark--;
					continue;
				}
			if (soap_flag_Type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Type", &a->Type, "xsd:string"))
				{	soap_flag_Type--;
					continue;
				}
			if (soap_flag_ServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ServerVersion", &a->ServerVersion, "xsd:string"))
				{	soap_flag_ServerVersion--;
					continue;
				}
			if (soap_flag_ResetServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ResetServerVersion", &a->ResetServerVersion, "xsd:string"))
				{	soap_flag_ResetServerVersion--;
					continue;
				}
			if (soap_flag_Size && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Size", &a->Size, "xsd:string"))
				{	soap_flag_Size--;
					continue;
				}
			if (soap_flag_OrderNumber && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "OrderNumber", &a->OrderNumber, "xsd:string"))
				{	soap_flag_OrderNumber--;
					continue;
				}
			if (soap_flag_AllDownload && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AllDownload", &a->AllDownload, "xsd:string"))
				{	soap_flag_AllDownload--;
					continue;
				}
			if (soap_flag_FewDownload && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "FewDownload", &a->FewDownload, "xsd:string"))
				{	soap_flag_FewDownload--;
					continue;
				}
			if (soap_flag_DownloadURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DownloadURL", &a->DownloadURL, "xsd:string"))
				{	soap_flag_DownloadURL--;
					continue;
				}
			if (soap_flag_OS && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "OS", &a->OS, "xsd:string"))
				{	soap_flag_OS--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__MPC__npRequestResponse, 0, sizeof(struct _MPC__npRequestResponse), 0, soap_copy__MPC__npRequestResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AppID > 0 || soap_flag_AppName > 0 || soap_flag_DisplayName > 0 || soap_flag_Detailtext > 0 || soap_flag_Mark > 0 || soap_flag_Type > 0 || soap_flag_ServerVersion > 0 || soap_flag_ResetServerVersion > 0 || soap_flag_Size > 0 || soap_flag_OrderNumber > 0 || soap_flag_AllDownload > 0 || soap_flag_FewDownload > 0 || soap_flag_DownloadURL > 0 || soap_flag_OS > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__MPC__npRequestResponse(struct soap *soap, const struct _MPC__npRequestResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__MPC__npRequestResponse);
	if (soap_out__MPC__npRequestResponse(soap, tag?tag:"MPC:npRequestResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestResponse * SOAP_FMAC4 soap_get__MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MPC__npRequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct _MPC__npRequestResponse * SOAP_FMAC2 soap_instantiate__MPC__npRequestResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MPC__npRequestResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__MPC__npRequestResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct _MPC__npRequestResponse);
		if (size)
			*size = sizeof(struct _MPC__npRequestResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct _MPC__npRequestResponse, n);
		if (size)
			*size = n * sizeof(struct _MPC__npRequestResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct _MPC__npRequestResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MPC__npRequestResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct _MPC__npRequestResponse %p -> %p\n", q, p));
	*(struct _MPC__npRequestResponse*)p = *(struct _MPC__npRequestResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_MPC__npRequestRequest(struct soap *soap, const struct _MPC__npRequestRequest *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->AppID);
	soap_serialize_xsd__string(soap, &a->DisplayName);
	soap_serialize_xsd__string(soap, &a->ResetServerVersion);
	soap_serialize_xsd__string(soap, &a->URLInfoAbout);
	soap_serialize_xsd__string(soap, &a->Publisher);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MPC__npRequestRequest(struct soap *soap, const char *tag, int id, const struct _MPC__npRequestRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MPC__npRequestRequest), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppID", -1, &a->AppID, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DisplayName", -1, &a->DisplayName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ResetServerVersion", -1, &a->ResetServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "URLInfoAbout", -1, &a->URLInfoAbout, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Publisher", -1, &a->Publisher, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _MPC__npRequestRequest * SOAP_FMAC4 soap_in_MPC__npRequestRequest(struct soap *soap, const char *tag, struct _MPC__npRequestRequest *a, const char *type)
{
	size_t soap_flag_AppID = 1;
	size_t soap_flag_DisplayName = 1;
	size_t soap_flag_ResetServerVersion = 1;
	size_t soap_flag_URLInfoAbout = 1;
	size_t soap_flag_Publisher = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _MPC__npRequestRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_MPC__npRequestRequest, sizeof(struct _MPC__npRequestRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_MPC__npRequestRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AppID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppID", &a->AppID, "xsd:string"))
				{	soap_flag_AppID--;
					continue;
				}
			if (soap_flag_DisplayName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DisplayName", &a->DisplayName, "xsd:string"))
				{	soap_flag_DisplayName--;
					continue;
				}
			if (soap_flag_ResetServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ResetServerVersion", &a->ResetServerVersion, "xsd:string"))
				{	soap_flag_ResetServerVersion--;
					continue;
				}
			if (soap_flag_URLInfoAbout && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "URLInfoAbout", &a->URLInfoAbout, "xsd:string"))
				{	soap_flag_URLInfoAbout--;
					continue;
				}
			if (soap_flag_Publisher && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Publisher", &a->Publisher, "xsd:string"))
				{	soap_flag_Publisher--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MPC__npRequestRequest, 0, sizeof(struct _MPC__npRequestRequest), 0, soap_copy_MPC__npRequestRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AppID > 0 || soap_flag_DisplayName > 0 || soap_flag_ResetServerVersion > 0 || soap_flag_URLInfoAbout > 0 || soap_flag_Publisher > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_MPC__npRequestRequest(struct soap *soap, const struct _MPC__npRequestRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_MPC__npRequestRequest);
	if (soap_out_MPC__npRequestRequest(soap, tag?tag:"MPC:npRequestRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestRequest * SOAP_FMAC4 soap_get_MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_MPC__npRequestRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->AppID);
	soap_default_xsd__string(soap, &a->DisplayName);
	soap_default_xsd__string(soap, &a->ResetServerVersion);
	soap_default_xsd__string(soap, &a->URLInfoAbout);
	soap_default_xsd__string(soap, &a->Publisher);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__MPC__npRequestRequest(struct soap *soap, const struct _MPC__npRequestRequest *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->AppID);
	soap_serialize_xsd__string(soap, &a->DisplayName);
	soap_serialize_xsd__string(soap, &a->ResetServerVersion);
	soap_serialize_xsd__string(soap, &a->URLInfoAbout);
	soap_serialize_xsd__string(soap, &a->Publisher);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MPC__npRequestRequest(struct soap *soap, const char *tag, int id, const struct _MPC__npRequestRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__MPC__npRequestRequest), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "AppID", -1, &a->AppID, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "DisplayName", -1, &a->DisplayName, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ResetServerVersion", -1, &a->ResetServerVersion, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "URLInfoAbout", -1, &a->URLInfoAbout, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "Publisher", -1, &a->Publisher, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _MPC__npRequestRequest * SOAP_FMAC4 soap_in__MPC__npRequestRequest(struct soap *soap, const char *tag, struct _MPC__npRequestRequest *a, const char *type)
{
	size_t soap_flag_AppID = 1;
	size_t soap_flag_DisplayName = 1;
	size_t soap_flag_ResetServerVersion = 1;
	size_t soap_flag_URLInfoAbout = 1;
	size_t soap_flag_Publisher = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _MPC__npRequestRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__MPC__npRequestRequest, sizeof(struct _MPC__npRequestRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default__MPC__npRequestRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AppID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "AppID", &a->AppID, "xsd:string"))
				{	soap_flag_AppID--;
					continue;
				}
			if (soap_flag_DisplayName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "DisplayName", &a->DisplayName, "xsd:string"))
				{	soap_flag_DisplayName--;
					continue;
				}
			if (soap_flag_ResetServerVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ResetServerVersion", &a->ResetServerVersion, "xsd:string"))
				{	soap_flag_ResetServerVersion--;
					continue;
				}
			if (soap_flag_URLInfoAbout && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "URLInfoAbout", &a->URLInfoAbout, "xsd:string"))
				{	soap_flag_URLInfoAbout--;
					continue;
				}
			if (soap_flag_Publisher && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Publisher", &a->Publisher, "xsd:string"))
				{	soap_flag_Publisher--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__MPC__npRequestRequest, 0, sizeof(struct _MPC__npRequestRequest), 0, soap_copy__MPC__npRequestRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AppID > 0 || soap_flag_DisplayName > 0 || soap_flag_ResetServerVersion > 0 || soap_flag_URLInfoAbout > 0 || soap_flag_Publisher > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__MPC__npRequestRequest(struct soap *soap, const struct _MPC__npRequestRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__MPC__npRequestRequest);
	if (soap_out__MPC__npRequestRequest(soap, tag?tag:"MPC:npRequestRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestRequest * SOAP_FMAC4 soap_get__MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in__MPC__npRequestRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct _MPC__npRequestRequest * SOAP_FMAC2 soap_instantiate__MPC__npRequestRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MPC__npRequestRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__MPC__npRequestRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct _MPC__npRequestRequest);
		if (size)
			*size = sizeof(struct _MPC__npRequestRequest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct _MPC__npRequestRequest, n);
		if (size)
			*size = n * sizeof(struct _MPC__npRequestRequest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct _MPC__npRequestRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MPC__npRequestRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct _MPC__npRequestRequest %p -> %p\n", q, p));
	*(struct _MPC__npRequestRequest*)p = *(struct _MPC__npRequestRequest*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PMPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__MPC__npRequestResponse))
		soap_serialize__MPC__npRequestResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PMPC__npRequestResponse(struct soap *soap, const char *tag, int id, struct _MPC__npRequestResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__MPC__npRequestResponse);
	if (id < 0)
		return soap->error;
	return soap_out__MPC__npRequestResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _MPC__npRequestResponse ** SOAP_FMAC4 soap_in_PMPC__npRequestResponse(struct soap *soap, const char *tag, struct _MPC__npRequestResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _MPC__npRequestResponse **)soap_malloc(soap, sizeof(struct _MPC__npRequestResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__MPC__npRequestResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__MPC__npRequestResponse, sizeof(struct _MPC__npRequestResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PMPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PMPC__npRequestResponse);
	if (soap_out_PMPC__npRequestResponse(soap, tag?tag:"MPC:npRequestResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestResponse ** SOAP_FMAC4 soap_get_PMPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PMPC__npRequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__MPC__npRequestResponse))
		soap_serialize__MPC__npRequestResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MPC__npRequestResponse(struct soap *soap, const char *tag, int id, struct _MPC__npRequestResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__MPC__npRequestResponse);
	if (id < 0)
		return soap->error;
	return soap_out__MPC__npRequestResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _MPC__npRequestResponse ** SOAP_FMAC4 soap_in_PointerTo_MPC__npRequestResponse(struct soap *soap, const char *tag, struct _MPC__npRequestResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _MPC__npRequestResponse **)soap_malloc(soap, sizeof(struct _MPC__npRequestResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__MPC__npRequestResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__MPC__npRequestResponse, sizeof(struct _MPC__npRequestResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_MPC__npRequestResponse);
	if (soap_out_PointerTo_MPC__npRequestResponse(soap, tag?tag:"MPC:npRequestResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestResponse ** SOAP_FMAC4 soap_get_PointerTo_MPC__npRequestResponse(struct soap *soap, struct _MPC__npRequestResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MPC__npRequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PMPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__MPC__npRequestRequest))
		soap_serialize__MPC__npRequestRequest(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PMPC__npRequestRequest(struct soap *soap, const char *tag, int id, struct _MPC__npRequestRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__MPC__npRequestRequest);
	if (id < 0)
		return soap->error;
	return soap_out__MPC__npRequestRequest(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _MPC__npRequestRequest ** SOAP_FMAC4 soap_in_PMPC__npRequestRequest(struct soap *soap, const char *tag, struct _MPC__npRequestRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _MPC__npRequestRequest **)soap_malloc(soap, sizeof(struct _MPC__npRequestRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__MPC__npRequestRequest(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__MPC__npRequestRequest, sizeof(struct _MPC__npRequestRequest), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PMPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PMPC__npRequestRequest);
	if (soap_out_PMPC__npRequestRequest(soap, tag?tag:"MPC:npRequestRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestRequest ** SOAP_FMAC4 soap_get_PMPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PMPC__npRequestRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__MPC__npRequestRequest))
		soap_serialize__MPC__npRequestRequest(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MPC__npRequestRequest(struct soap *soap, const char *tag, int id, struct _MPC__npRequestRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__MPC__npRequestRequest);
	if (id < 0)
		return soap->error;
	return soap_out__MPC__npRequestRequest(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _MPC__npRequestRequest ** SOAP_FMAC4 soap_in_PointerTo_MPC__npRequestRequest(struct soap *soap, const char *tag, struct _MPC__npRequestRequest **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _MPC__npRequestRequest **)soap_malloc(soap, sizeof(struct _MPC__npRequestRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__MPC__npRequestRequest(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _MPC__npRequestRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__MPC__npRequestRequest, sizeof(struct _MPC__npRequestRequest), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_MPC__npRequestRequest);
	if (soap_out_PointerTo_MPC__npRequestRequest(soap, tag?tag:"MPC:npRequestRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _MPC__npRequestRequest ** SOAP_FMAC4 soap_get_PointerTo_MPC__npRequestRequest(struct soap *soap, struct _MPC__npRequestRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MPC__npRequestRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
